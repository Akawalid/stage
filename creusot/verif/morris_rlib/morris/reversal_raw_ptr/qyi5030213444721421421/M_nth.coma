(* #"/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 54 4 54 87 *)

(* reversal_raw_ptr::Node<T> *)

let%span sreversal_raw_ptr = "/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 55 20 55 21
let%span sreversal_raw_ptr'0 = "/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 56 22 56 60
let%span sreversal_raw_ptr'1 = "/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 58 20 58 65
let%span sreversal_raw_ptr'2 = "/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 57 20 57 41
let%span sreversal_raw_ptr'3 = "/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 69 26 69 99
let%span sreversal_raw_ptr'4 = "/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 70 17 70 18
let%span sreversal_raw_ptr'5 = "/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 54 47 54 50
let%span sreversal_raw_ptr'6 = "/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 51 15 51 35
let%span sreversal_raw_ptr'7 = "/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 52 15 52 44
let%span sreversal_raw_ptr'8 = "/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 54 85 54 87
let%span sreversal_raw_ptr'9 = "/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 53 14 53 45
let%span sreversal_raw_ptr'10 = "/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 13 14 13 28
let%span sreversal_raw_ptr'11 = "/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 16 12 25 13
let%span sptr = "/home/baggabom/stage/creusot/creusot-contracts/src/std/ptr.rs" 59 14 59 53
let%span sptr'0 = "/home/baggabom/stage/creusot/creusot-contracts/src/std/ptr.rs" 61 8 61 35
let%span sseq = "/home/baggabom/stage/creusot/creusot-contracts/src/logic/seq.rs" 546 22 546 26
let%span sseq'0 = "/home/baggabom/stage/creusot/creusot-contracts/src/logic/seq.rs" 546 4 546 53
let%span sseq'1 = "/home/baggabom/stage/creusot/creusot-contracts/src/logic/seq.rs" 542 14 545 5
let%span sseq'2 = "/home/baggabom/stage/creusot/creusot-contracts/src/logic/seq.rs" 169 8 169 39
let%span sseq'3 = "/home/baggabom/stage/creusot/creusot-contracts/src/logic/seq.rs" 86 8 86 82
let%span sseq'4 = "/home/baggabom/stage/creusot/creusot-contracts/src/logic/seq.rs" 673 20 673 95
let%span sghost = "/home/baggabom/stage/creusot/creusot-contracts/src/ghost.rs" 68 14 68 18
let%span sghost'0 = "/home/baggabom/stage/creusot/creusot-contracts/src/ghost.rs" 68 4 68 36
let%span sghost'1 = "/home/baggabom/stage/creusot/creusot-contracts/src/ghost.rs" 67 14 67 43
let%span sghost'2 = "/home/baggabom/stage/creusot/creusot-contracts/src/ghost.rs" 181 14 181 29
let%span sghost'3 = "/home/baggabom/stage/creusot/creusot-contracts/src/ghost.rs" 164 15 164 16
let%span sghost'4 = "/home/baggabom/stage/creusot/creusot-contracts/src/ghost.rs" 164 4 164 28
let%span sghost'5 = "/home/baggabom/stage/creusot/creusot-contracts/src/ghost.rs" 162 14 162 26
let%span sghost'6 = "/home/baggabom/stage/creusot/creusot-contracts/src/ghost.rs" 99 8 99 18
let%span sboxed = "/home/baggabom/stage/creusot/creusot-contracts/src/std/boxed.rs" 33 8 33 18
let%span sptr_own = "/home/baggabom/stage/creusot/creusot-contracts/src/ptr_own.rs" 83 41 83 44
let%span sptr_own'0 = "/home/baggabom/stage/creusot/creusot-contracts/src/ptr_own.rs" 80 15 80 31
let%span sptr_own'1 = "/home/baggabom/stage/creusot/creusot-contracts/src/ptr_own.rs" 83 4 83 70
let%span sptr_own'2 = "/home/baggabom/stage/creusot/creusot-contracts/src/ptr_own.rs" 81 14 81 35
let%span sptr_own'3 = "/home/baggabom/stage/creusot/creusot-contracts/src/ptr_own.rs" 49 8 49 35
let%span sinvariant = "/home/baggabom/stage/creusot/creusot-contracts/src/invariant.rs" 91 8 91 18
let%span sint = "/home/baggabom/stage/creusot/creusot-contracts/src/logic/int.rs" 56 14 56 31
let%span soption = "/home/baggabom/stage/creusot/creusot-contracts/src/std/option.rs" 135 16 135 17
let%span soption'0 = "/home/baggabom/stage/creusot/creusot-contracts/src/std/option.rs" 136 27 136 39
let%span soption'1 = "/home/baggabom/stage/creusot/creusot-contracts/src/std/option.rs" 137 26 137 46

use creusot.int.Int128
use seq.Seq
use creusot.prelude.Opaque
use creusot.int.UInt64
use mach.int.Int
use creusot.prelude.Any

type t_T

type t_Node  =
  { t_Node__elem: t_T; t_Node__next: Opaque.ptr }

type t_PtrOwn  =
  { t_PtrOwn__ptr: Opaque.ptr; t_PtrOwn__val: t_Node }

function addr_logic (self : Opaque.ptr) : UInt64.t

function is_null_logic (self : Opaque.ptr) : bool =
  [%#sptr'0] addr_logic self = (0 : UInt64.t)

axiom is_null_logic_spec : forall self : Opaque.ptr . [%#sptr] is_null_logic self = (addr_logic self = (0 : UInt64.t))

function ptr (self : t_PtrOwn) : Opaque.ptr

function val' (self : t_PtrOwn) : t_Node

function tail (self : Seq.seq t_PtrOwn) : Seq.seq t_PtrOwn =
  [%#sseq'2] Seq.([..]) self 1 (Seq.length self)

predicate list [#"/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 14 4 14 68] (l : Opaque.ptr) (perm_seq : Seq.seq t_PtrOwn)


axiom list_def : forall l : Opaque.ptr, perm_seq : Seq.seq t_PtrOwn . list l perm_seq
= ([%#sreversal_raw_ptr'11] if is_null_logic l then
  Seq.length perm_seq = 0
else
  if Seq.length perm_seq > 0 then
    let ptr'0 = ptr (Seq.get perm_seq 0) in l = ptr'0 /\ list (val' (Seq.get perm_seq 0)).t_Node__next (tail perm_seq)
  else
    false

)

predicate invariant' (self : t_PtrOwn) =
  [%#sptr_own'3] not is_null_logic (ptr self)

predicate inv (_0 : t_T)

predicate inv'0 (_0 : t_Node)

axiom inv_axiom [@rewrite] : forall x : t_Node [inv'0 x] . inv'0 x
= match x with
  | {t_Node__elem = elem ; t_Node__next = next} -> inv elem
  end

predicate invariant''0 (self : t_Node) =
  [%#sboxed] inv'0 self

predicate inv'1 (_0 : t_Node)

axiom inv_axiom'0 [@rewrite] : forall x : t_Node [inv'1 x] . inv'1 x = invariant''0 x

predicate inv'2 (_0 : t_PtrOwn)

axiom inv_axiom'1 [@rewrite] : forall x : t_PtrOwn [inv'2 x] . inv'2 x
= (invariant' x
/\ match x with
  | {t_PtrOwn__ptr = ptr'0 ; t_PtrOwn__val = val''0} -> inv'1 val''0
  end)

predicate invariant''1 (self : t_PtrOwn) =
  [%#sboxed] inv'2 self

predicate inv'3 (_0 : t_PtrOwn)

axiom inv_axiom'2 [@rewrite] : forall x : t_PtrOwn [inv'3 x] . inv'3 x = invariant''1 x

predicate invariant''2 (self : Seq.seq t_PtrOwn) =
  [%#sseq'4] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)

predicate inv'4 (_0 : Seq.seq t_PtrOwn)

axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t_PtrOwn [inv'4 x] . inv'4 x = invariant''2 x

predicate invariant''3 (self :  (Seq.seq t_PtrOwn)) =
  [%#sghost'6] inv'4 self

predicate inv'5 (_0 :  (Seq.seq t_PtrOwn))

axiom inv_axiom'4 [@rewrite] : forall x :  (Seq.seq t_PtrOwn) [inv'5 x] . inv'5 x = invariant''3 x

predicate invariant''4 (self :  (Seq.seq t_PtrOwn)) =
  [%#sinvariant] inv'5 self

predicate inv'6 (_0 :  (Seq.seq t_PtrOwn))

axiom inv_axiom'5 [@rewrite] : forall x :  (Seq.seq t_PtrOwn) [inv'6 x] . inv'6 x = invariant''4 x

predicate invariant''5 (self : Seq.seq t_PtrOwn) =
  [%#sinvariant] inv'4 self

predicate inv'7 (_0 : Seq.seq t_PtrOwn)

axiom inv_axiom'6 [@rewrite] : forall x : Seq.seq t_PtrOwn [inv'7 x] . inv'7 x = invariant''5 x

let rec deref (self: (Seq.seq t_PtrOwn)) (return'  (x:Seq.seq t_PtrOwn))= {[@expl:deref 'self' type invariant] [%#sghost] inv'6 self}
  any
  [ return''0 (result:Seq.seq t_PtrOwn)-> {[%#sghost'0] inv'7 result}
    {[%#sghost'1] self = result}
    (! return' {result}) ]


let rec new (value:Int128.t) (return'  (x: int))= any
  [ return''0 (result: int)-> {[%#sint] result = Int128.to_int value} (! return' {result}) ]


let rec into_inner (self: int) (return'  (x:int))= any
  [ return''0 (result:int)-> {[%#sghost'2] result = self} (! return' {result}) ]


type t_Option  =
  | C_None
  | C_Some t_PtrOwn

predicate invariant''6 (self : t_PtrOwn) =
  [%#sinvariant] inv'2 self

predicate inv'8 (_0 : t_PtrOwn)

axiom inv_axiom'7 [@rewrite] : forall x : t_PtrOwn [inv'8 x] . inv'8 x = invariant''6 x

predicate inv'9 (_0 : t_Option)

axiom inv_axiom'8 [@rewrite] : forall x : t_Option [inv'9 x] . inv'9 x
= match x with
  | C_None -> true
  | C_Some a_0 -> inv'8 a_0
  end

type t_Option'0  =
  | C_None'0
  | C_Some'0 t_PtrOwn

function get (self : Seq.seq t_PtrOwn) (ix : int) : t_Option'0 =
  [%#sseq'3] if 0 <= ix /\ ix < Seq.length self then C_Some'0 (Seq.get self ix) else C_None'0

let rec get_ghost (self:Seq.seq t_PtrOwn) (index:int) (return'  (x:t_Option))= {[@expl:get_ghost 'self' type invariant] [%#sseq] inv'7 self}
  any
  [ return''0 (result:t_Option)-> {[%#sseq'0] inv'9 result}
    {[%#sseq'1] match get self index with
      | C_None'0 -> result = C_None
      | C_Some'0 v -> result = C_Some v
      end}
    (! return' {result}) ]


let rec unwrap (self_:t_Option) (return'  (x:t_PtrOwn))= {[@expl:unwrap 'self_' type invariant] [%#soption] inv'9 self_}
  {[@expl:unwrap requires] [%#soption'0] self_ <> C_None}
  any [ return''0 (result:t_PtrOwn)-> {inv'8 result} {[%#soption'1] C_Some result = self_} (! return' {result}) ] 

predicate invariant''7 (self :  t_PtrOwn) =
  [%#sghost'6] inv'8 self

predicate inv'10 (_0 :  t_PtrOwn)

axiom inv_axiom'9 [@rewrite] : forall x :  t_PtrOwn [inv'10 x] . inv'10 x = invariant''7 x

let rec new'0 (x:t_PtrOwn) (return'  (x'0: t_PtrOwn))= {[@expl:new 'x' type invariant] [%#sghost'3] inv'8 x}
  any [ return''0 (result: t_PtrOwn)-> {[%#sghost'4] inv'10 result} {[%#sghost'5] result = x} (! return' {result}) ] 

predicate invariant''8 (self : t_Node) =
  [%#sinvariant] inv'0 self

predicate inv'11 (_0 : t_Node)

axiom inv_axiom'10 [@rewrite] : forall x : t_Node [inv'11 x] . inv'11 x = invariant''8 x

let rec as_ref (ptr'0:Opaque.ptr) (own: t_PtrOwn) (return'  (x:t_Node))= {[@expl:as_ref 'own' type invariant] [%#sptr_own] inv'10 own}
  {[@expl:as_ref requires] [%#sptr_own'0] ptr'0 = ptr own}
  any
  [ return''0 (result:t_Node)-> {[%#sptr_own'1] inv'11 result} {[%#sptr_own'2] result = val' own} (! return' {result}) ]


predicate invariant''9 (self : t_T) =
  [%#sinvariant] inv self

predicate inv'12 (_0 : t_T)

axiom inv_axiom'11 [@rewrite] : forall x : t_T [inv'12 x] . inv'12 x = invariant''9 x

meta "compute_max_steps" 1000000

let rec nth[#"/home/baggabom/stage/creusot_rust/creusot/src/reversal_raw_ptr.rs" 54 4 54 87] (p:Opaque.ptr) (nth'0:Int128.t) (seq: (Seq.seq t_PtrOwn)) (return'  (x:t_T))= {[@expl:nth 'seq' type invariant] [%#sreversal_raw_ptr'5] inv'6 seq}
  {[@expl:nth requires #0] [%#sreversal_raw_ptr'6] list p seq}
  {[@expl:nth requires #1] [%#sreversal_raw_ptr'7] 0 <= Int128.to_int nth'0 /\ Int128.to_int nth'0 < Seq.length seq}
  (! bb0
  [ bb0 = s0
    [ s0 =  [ &i <- [%#sreversal_raw_ptr] (0 : Int128.t) ] s1
    | s1 = {[@expl:assertion] [%#sreversal_raw_ptr'0] seq'0 = Seq.([..]) seq'0 0 (Seq.length seq'0)} s2
    | s2 = bb1 ]
  
  | bb1 = bb1'0
    [ bb1'0 = {[@expl:loop invariant #0] [%#sreversal_raw_ptr'2] 0 <= Int128.to_int i
      /\ Int128.to_int i <= Int128.to_int nth'1}
      {[@expl:loop invariant #1] [%#sreversal_raw_ptr'1] list p'0 (Seq.([..]) seq'0 (Int128.to_int i) (Seq.length seq'0))}
      (! s0) [ s0 = bb2 ] 
      [ bb2 = s0 [ s0 = deref {seq'0} (fun (_ret:Seq.seq t_PtrOwn) ->  [ &_22 <- _ret ] s1) | s1 = bb3 ] 
      | bb3 = s0 [ s0 = new {i} (fun (_ret: int) ->  [ &_25 <- _ret ] s1) | s1 = bb4 ] 
      | bb4 = s0 [ s0 = into_inner {_25} (fun (_ret:int) ->  [ &_24 <- _ret ] s1) | s1 = bb5 ] 
      | bb5 = s0 [ s0 = get_ghost {_22} {_24} (fun (_ret:t_Option) ->  [ &_20 <- _ret ] s1) | s1 = bb6 ] 
      | bb6 = s0 [ s0 = unwrap {_20} (fun (_ret:t_PtrOwn) ->  [ &_19 <- _ret ] s1) | s1 = bb7 ] 
      | bb7 = s0 [ s0 = new'0 {_19} (fun (_ret: t_PtrOwn) ->  [ &_17 <- _ret ] s1) | s1 = bb8 ] 
      | bb8 = s0 [ s0 = as_ref {p'0} {_17} (fun (_ret:t_Node) ->  [ &rw <- _ret ] s1) | s1 = bb9 ] 
      | bb9 = s0
        [ s0 =  [ &_28 <- i = nth'1 ] s1 | s1 = any [ br0 -> {_28 = false} (! bb11) | br1 -> {_28} (! bb10) ]  ]
      
      | bb11 = s0
        [ s0 =  [ &p'0 <- rw.t_Node__next ] s1
        | s1 = {[@expl:assertion] [%#sreversal_raw_ptr'3] tail (Seq.([..]) seq'0 (Int128.to_int i) (Seq.length seq'0))
          = Seq.([..]) seq'0 (Int128.to_int i + 1) (Seq.length seq'0)}
          s2
        | s2 = Int128.add {i} {[%#sreversal_raw_ptr'4] (1 : Int128.t)} (fun (_ret:Int128.t) ->  [ &i <- _ret ] s3)
        | s3 = bb1'0 ]
       ]
     ]
  
  | bb10 = s0 [ s0 =  [ &_32 <- rw.t_Node__elem ] s1 | s1 =  [ &_0 <- _32 ] s2 | s2 = return''0 {_0} ]  ]
  )
  [ & _0 : t_T = Any.any_l ()
  | & p'0 : Opaque.ptr = p
  | & nth'1 : Int128.t = nth'0
  | & seq'0 :  (Seq.seq t_PtrOwn) = seq
  | & i : Int128.t = Any.any_l ()
  | & rw : t_Node = Any.any_l ()
  | & _17 :  t_PtrOwn = Any.any_l ()
  | & _19 : t_PtrOwn = Any.any_l ()
  | & _20 : t_Option = Any.any_l ()
  | & _22 : Seq.seq t_PtrOwn = Any.any_l ()
  | & _24 : int = Any.any_l ()
  | & _25 :  int = Any.any_l ()
  | & _28 : bool = Any.any_l ()
  | & _32 : t_T = Any.any_l () ]
  
  [ return''0 (result:t_T)-> {[@expl:nth result type invariant] [%#sreversal_raw_ptr'8] inv'12 result}
    {[@expl:nth ensures] [%#sreversal_raw_ptr'9] (val' (Seq.get seq (Int128.to_int nth'0))).t_Node__elem = result}
    (! return' {result}) ]
  
